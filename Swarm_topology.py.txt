# plugins/swarm_topology.py
import networkx as nx
import numpy as np
from typing import Dict, List
from dataclasses import dataclass

@dataclass
class DroneNode:
    id: str
    position: np.ndarray  # [x,y,z] in meters
    signal_strength: float
    battery: float

class SwarmTopologyOptimizer:
    def __init__(self):
        self.graph = nx.Graph()
        
    def update_topology(self, drones: List[DroneNode]) -> Dict:
        """Rebuild swarm connectivity graph"""
        self.graph.clear()
        
        # Add nodes with attributes
        for drone in drones:
            self.graph.add_node(
                drone.id,
                pos=drone.position,
                battery=drone.battery
            )
            
        # Dynamic edge creation based on signal strength
        for i, drone1 in enumerate(drones):
            for drone2 in drones[i+1:]:
                distance = np.linalg.norm(drone1.position - drone2.position)
                link_quality = self._calculate_link_quality(
                    drone1.signal_strength,
                    drone2.signal_strength,
                    distance
                )
                if link_quality > 0.5:  # Viable connection threshold
                    self.graph.add_edge(
                        drone1.id, drone2.id,
                        weight=1/link_quality,
                        distance=distance
                    )
                    
        return self._optimize_routes()

    def _calculate_link_quality(self, rssi1: float, rssi2: float, distance: float) -> float:
        """Friis transmission equation with noise"""
        avg_rssi = (rssi1 + rssi2) / 2
        theoretical_loss = 20 * np.log10(distance) + 20 * np.log10(2400) - 27.55  # 2.4GHz
        return max(0, 1 - (avg_rssi / theoretical_loss))

    def _optimize_routes(self) -> Dict:
        """Find optimal paths using network science"""
        try:
            # 1. Ensure graph connectivity
            if not nx.is_connected(self.graph):
                self._add_critical_edges()
                
            # 2. Calculate betweenness centrality
            centrality = nx.betweenness_centrality(self.graph, weight='weight')
            
            # 3. Generate routing table
            routes = {}
            for source in self.graph.nodes:
                routes[source] = nx.single_source_dijkstra(
                    self.graph, source, weight='weight'
                )[1]
                
            return {
                "connectivity_graph": nx.node_link_data(self.graph),
                "centrality": centrality,
                "routing_table": routes
            }
        except nx.NetworkXException as e:
            raise RuntimeError(f"Topology optimization failed: {str(e)}")

    def _add_critical_edges(self):
        """Connect disconnected components using nearest nodes"""
        components = list(nx.connected_components(self.graph))
        for i in range(len(components)-1):
            # Find closest nodes between components
            min_dist = float('inf')
            pair = None
            for node1 in components[i]:
                for node2 in components[i+1]:
                    pos1 = self.graph.nodes[node1]['pos']
                    pos2 = self.graph.nodes[node2]['pos']
                    dist = np.linalg.norm(pos1 - pos2)
                    if dist < min_dist:
                        min_dist = dist
                        pair = (node1, node2)
            if pair:
                self.graph.add_edge(pair[0], pair[1], weight=min_dist*2)

# FastAPI Integration
router