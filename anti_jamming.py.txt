# plugins/anti_jamming.py
import numpy as np
from rtlsdr import RtlSdr
from scipy import signal
from typing import Dict, Optional
import asyncio
import logging

class AntiJammingPlugin:
    def __init__(self):
        self.sdr = RtlSdr()
        self._configure_sdr()
        self.jamming_threshold = 1e6  # Empirical value for wideband noise
        
    def _configure_sdr(self):
        self.sdr.sample_rate = 2.4e6
        self.sdr.center_freq = 915e6  # Common drone control freq
        self.sdr.gain = 'auto'
        
    async def run(self, duration: float = 5.0) -> Dict:
        """Scan spectrum for jamming signals"""
        try:
            samples = await self._capture_samples(duration)
            psd = self._compute_psd(samples)
            return self._analyze_spectrum(psd)
        except Exception as e:
            logging.error(f"Jamming detection failed: {str(e)}")
            raise

    async def _capture_samples(self, duration: float) -> np.ndarray:
        """Capture IQ samples from SDR"""
        samples = []
        async for data in self.sdr.stream(int(self.sdr.sample_rate * duration)):
            samples.extend(data)
            if len(samples) >= 1e6:  # Limit memory usage
                break
        return np.array(samples)

    def _compute_psd(self, samples: np.ndarray) -> np.ndarray:
        """Compute power spectral density"""
        return np.abs(np.fft.fft(samples))**2 / len(samples)

    def _analyze_spectrum(self, psd: np.ndarray) -> Dict:
        """Detect broadband jamming signatures"""
        if np.max(psd) > self.jamming_threshold:
            bandwidth = self._estimate_bandwidth(psd)
            return {
                "threat_level": "CRITICAL",
                "bandwidth_mhz": bandwidth,
                "frequency_bands_affected": self._find_affected_bands(psd)
            }
        return {"threat_level": "CLEAR"}

    def _estimate_bandwidth(self, psd: np.ndarray) -> float:
        """Estimate jamming signal bandwidth"""
        peaks, _ = signal.find_peaks(psd, height=self.jamming_threshold/2)
        return (peaks[-1] - peaks[0]) * (self.sdr.sample_rate/len(psd)) / 1e6

    def _find_affected_bands(self, psd: np.ndarray) -> list:
        """Identify compromised frequency ranges"""
        affected = []
        for freq in [915, 2400, 5800]:  # Common drone bands in MHz
            idx = int((freq*1e6 - self.sdr.center_freq) / self.sdr.sample_rate * len(psd))
            if psd[idx] > self.jamming_threshold/2:
                affected.append(freq)
        return affected

# FastAPI Endpoint
from fastapi import APIRouter
router = APIRouter()
detector = AntiJammingPlugin()

@router.post("/detect-jamming")
async def detect_jamming(duration: float = 5.0):
    return await detector.run(duration)